#!/usr/bin/perl
use warnings;
use strict;
BEGIN { unshift @INC, "perl"; }

# Generate an HTML word list from flashcard vocabulary table files.
# These include etymology notes and we chose HTML because that makes
# it easier to represent the many scripts which appear in etymologies
# (Hebrew, Syriac, Greek, etc.). Also, conceivably at some point we
# could add javascript to allow the user to select groups of words, or
# hide the notes.

# Uses ./foot_fmt.pl to configure how card footers are formatted for
# the HTML wordlists. Footers which differ from the previous footer
# only by an appended "+" or "-" are indicated with a horizontal line.

# It takes a half-second to run this command, seems this is mostly
# time spent by Perl loading libraries.

use ArabicTeX;
use ReadTable;

use utf8;
use open (":encoding(UTF-8)", ":std" );

use Sh;
use PV;

use CGI qw(:all meta *table *tbody "-utf8");
use HTML::Entities;

use Getopt::Long;
Getopt::Long::Configure ("bundling", "no_ignore_case");

sub usage {
  warn "Usage: make-wordlist-cgi -o OUT_BASE  TABLE_FILES\n";
  exit shift;
}

my (@tab_files,
    $verbose,
    $help,
    $bad_args,
    $output_base,
    $keep_aux
    );

GetOptions('-v' => \$verbose,
           '-f|foot=s' => \$foot_fmt,
           '-o=s' => \$output_base,
           '-h|help' => \$help,
           '-K|keep-aux' => \$keep_aux
    ) or usage 1;

usage 0 if $help;

$PV::debug = $ReadTable::verbose = $verbose;

# help us get clean diffs
$CGI::Util::SORT_ATTRIBUTES=1;

@tab_files = @ARGV or do {
  die "Need to specify an input table\n";
};

my $out_html;
my $outputting = 1;

my $fnsuff = "-words";

if($outputting) {
  if(!defined $output_base) {
    if(@tab_files>1) {
      die "Need to specify output basename when using multiple inputs";
    } else {
      ($output_base = $tab_files[0]) =~ s/\..*?$//;
    }
  }
  pv '$output_base';
  $out_html = "$output_base$fnsuff.html";
  warn "Writing to $out_html\n" if $verbose;
  open OUT, ">", $out_html or die "Couldn't open $out_html for writing";

  print OUT start_html(
    -title => 'Word list',
    -meta => {
      viewport =>
          "width=device-width,initial-scale=1,user-scalable=yes"
    },
    -head => meta({
      -http_equiv => 'Content-Type',
          -content    => 'text/html; charset=utf-8'
                  }),
    -style => {-src => "css/wordlist.css"}
      );
  print OUT start_table(),"\n";
  print OUT thead(
    Tr(
      th({-style=>"text-align:left;"},["Arabic","English","Notes"]))
      ),"\n";
#   <thead>
# <tr>
# 	<th style="text-align:left;">Arabic</th>
# 	<th style="text-align:left;">English</th>
# 	<th style="text-align:left;">Notes</th>
# </tr>
# </thead>

# <link rel="stylesheet" type="text/css" href="css/wordlist.css">


  
#   print OUT <<\EOF;
# Title: Word list {{wlhead.mdi}} <!-- -*- my-source-command: "./run-mmd %s" -*- -->

# Arabic  | English | Notes
# ------- | ------- | -------
# EOF
}

my @entries;

sub add_entry {
  my ($arabic,$artransl,$english,$foot,$notes) = @_;
  push @entries, {
    arabic=>$arabic,
    artransl=>$artransl,
    english=>$english,
    foot=>$foot,
    notes=>$notes
  };
}

warn "Reading table\n";
read_vocab_table(\&add_entry, \@tab_files);

my %entries_by_feet;

warn "Formatting entries\n";
for my $e (@entries) {
  push @{$entries_by_feet{$e->{foot}}}, $e;
}

do "./foot_fmt.pl";

sub html_fixup {
  ($_)=@_;
  return undef unless defined $_;
  s/\\\\//g;
  $_ = encode_entities($_,'<>&"');
  $_
}

if($outputting) {
  warn "Writing output\n";
  my $prev_ffmt=undef;
  for my $f (sort {foot_cmp($a,$b)} keys %entries_by_feet) {

    my $ffmt = foot_fmt($f);
    # Footer changed, print a new header
    if(!defined $prev_ffmt || $ffmt ne $prev_ffmt) {

# <tbody>
# <tr>
# 	<td style="text-align:left;" colspan="3"><div class="foothead">BAS Verbs</div></td>
# </tr>
      # </tbody>

      print OUT tbody(
        Tr(td({colspan=>3},
              div({class=>"foothead"},$ffmt)))),
          "\n";

#      print OUT "<div class=\"foothead\">$ffmt</div> |||\n\n";
    }
    $prev_ffmt = $ffmt;

    print OUT start_tbody();
    my @es = @{$entries_by_feet{$f}};
    for my $e (@es) {
      my ($ar,$art,$en,$no) =
          map {html_fixup $_}
      @$e{qw(arabic artransl english notes)};
      my $arhtml = span({class=>"arabic"},$ar);
      # print OUT "<span class=\"arabic\">$ar</span>";
      if(defined $art) {
##        print OUT "<span class=\"translit\">&nbsp;<em>($art)</em></span>";
        $arhtml .= "&nbsp;".span({class=>"translit"}, em("($art)"));
      }
      $no = "" unless defined $no;
      print OUT Tr(map {td($_)} ($arhtml, $en, $no)),"\n";
#      print OUT " | $en | $no\n";
    }
    print OUT end_tbody();
# print OUT "\n";
  }
  print OUT end_table();
  print OUT end_html();
  close OUT;

#  sh ("./run-mmd",$out_html);
  # rename ("$output_base$fnsuff.gen.html",
  #         "$output_base$fnsuff.html");
  # if(!$keep_aux) {
  #   unlink "$output_base$fnsuff.gen.md";
  # }
}

